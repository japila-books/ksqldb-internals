{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":false},"docs":[{"location":"","text":"<p>Welcome to The Internals of ksqlDB online book! \ud83e\udd19</p> <p>I'm Jacek Laskowski, an IT freelancer specializing in Apache Spark, Delta Lake, Apache Kafka and Kafka Streams (with brief forays into a wider data engineering space, e.g. Trino and ksqlDB, mostly during Warsaw Data Engineering meetups).</p> <p>I'm very excited to have you here and hope you will enjoy exploring the internals of ksqlDB as much as I have.</p>  <p>Flannery O'Connor</p> <p>I write to discover what I know.</p>   \"The Internals Of\" series <p>I'm also writing other online books in the \"The Internals Of\" series. Please visit \"The Internals Of\" Online Books home page.</p>  <p>Expect text and code snippets from a variety of public sources. Attribution follows.</p> <p>Now, let's take a deep dive into ksqlDB \ud83d\udd25</p>  <p>Last update: 2021-12-07</p>","title":"The Internals of ksqlDB 0.22.0"},{"location":"AstBuilder/","text":"","title":"AstBuilder"},{"location":"AstBuilder/#creating-instance","text":"<p><code>AstBuilder</code> takes the following to be created:</p> <ul> <li> <code>TypeRegistry</code>  <p><code>AstBuilder</code> is created when:</p> <ul> <li><code>QueryAnonymizer.Visitor</code> is requested to <code>visitExpression</code></li> <li><code>DefaultKsqlParser</code> is requested to prepare</li> <li><code>ExpressionParser</code> is requested to <code>parseSelectExpression</code>, <code>parseExpression</code>, <code>parseWindowExpression</code></li> </ul>","title":"Creating Instance"},{"location":"AstBuilder/#buildstatement","text":"","title":"buildStatement <pre><code>Statement buildStatement(\n  ParserRuleContext parseTree)\n</code></pre> <p><code>buildStatement</code>...FIXME</p> <p><code>buildStatement</code> is used when:</p> <ul> <li><code>DefaultKsqlParser</code> is requested to prepare a ParsedStatement</li> </ul>"},{"location":"AstBuilder/#build","text":"","title":"build <pre><code>&lt;T extends Node&gt; T build(\n  Optional&lt;Set&lt;SourceName&gt;&gt; sources,\n  ParserRuleContext parseTree)\n</code></pre> <p><code>build</code> creates a <code>Visitor</code> and requests it to <code>visit</code> the <code>parseTree</code> (and create a <code>Node</code>).</p> <p><code>build</code> is used when:</p> <ul> <li><code>AstBuilder</code> is requested to buildStatement, buildExpression, buildWindowExpression and buildAssertStatement</li> </ul>"},{"location":"CommonCreateConfigs/","text":"","title":"CommonCreateConfigs"},{"location":"CommonCreateConfigs/#kafka_topic","text":"","title":"KAFKA_TOPIC <p>The topic that stores the data of the source</p> <p>Default: (undefined)</p>"},{"location":"CommonCreateConfigs/#value_format","text":"","title":"VALUE_FORMAT <p>The format of the serialized value</p> <p>Default: (undefined)</p>"},{"location":"CommonCreateConfigs/#partitions","text":"","title":"PARTITIONS <p>The number of partitions in the backing topic. Required if creating a source without an existing topic.</p> <p>Default: (undefined)</p>"},{"location":"CommonCreateConfigs/#addtoconfigdef","text":"","title":"addToConfigDef <pre><code>void addToConfigDef(\n  ConfigDef configDef,\n  boolean topicNameRequired)\n</code></pre> <p><code>addToConfigDef</code> defines configuration properties (in the given <code>ConfigDef</code>).</p> <p><code>addToConfigDef</code> is used when:</p> <ul> <li><code>CreateAsConfigs</code> is created</li> <li><code>CreateConfigs</code> is created</li> </ul>"},{"location":"CreateSource/","text":"<p><code>CreateSource</code> is an extension of the Statement abstraction for CREATE SOURCE statements.</p>","title":"CreateSource"},{"location":"CreateSource/#contract","text":"","title":"Contract"},{"location":"CreateSource/#copywith","text":"","title":"copyWith <pre><code>CreateSource copyWith(\n  TableElements elements,\n  CreateSourceProperties properties)\n</code></pre>"},{"location":"CreateSource/#getsourcetype","text":"","title":"getSourceType <pre><code>SourceType getSourceType()\n</code></pre>"},{"location":"CreateSource/#implementations","text":"<ul> <li>CreateStream</li> <li><code>CreateTable</code></li> </ul>","title":"Implementations"},{"location":"CreateSource/#creating-instance","text":"<p><code>CreateSource</code> takes the following to be created:</p> <ul> <li> <code>NodeLocation</code> <li> <code>SourceName</code> <li> <code>TableElements</code> <li> <code>orReplace</code> flag <li> <code>notExists</code> flag <li> CreateSourceProperties <li> <code>isSource</code> flag   <p>Abstract Class</p> <p><code>CreateSource</code> is an abstract class and cannot be created directly. It is created indirectly for the concrete CreateSources.</p>","title":"Creating Instance"},{"location":"CreateSourceProperties/","text":"","title":"CreateSourceProperties"},{"location":"CreateSourceProperties/#creating-instance","text":"<p><code>CreateSourceProperties</code> takes the following to be created:</p> <ul> <li> Originals (<code>Map&lt;String, Literal&gt;</code>) <li> Duration Parser (<code>Function&lt;String, Duration&gt;</code>)  <p><code>CreateSourceProperties</code> is created using from factory and when:</p> <ul> <li>withKeyValueSchemaName</li> <li>withPartitions</li> <li>withFormats</li> </ul> <p>While being created, <code>CreateSourceProperties</code> creates a <code>PropertiesConfig</code> and...FIXME</p>","title":"Creating Instance"},{"location":"CreateSourceProperties/#creating-createsourceproperties","text":"","title":"Creating CreateSourceProperties <pre><code>CreateSourceProperties from(\n  Map&lt;String, Literal&gt; literals)\n</code></pre> <p><code>from</code> creates a CreateSourceProperties (with the given <code>literals</code> and the default <code>DurationParser</code>).</p> <p><code>from</code> is used when:</p> <ul> <li><code>AstBuilder.Visitor</code> is requested to visitCreateTable, visitCreateStream, visitAssertStream and visitAssertTable</li> </ul>"},{"location":"CreateStream/","text":"<p><code>CreateStream</code> is a <code>CreateSource</code> and a <code>ExecutableDdlStatement</code> that represents the following SQL statements:</p> <pre><code>CREATE (OR REPLACE)? (SOURCE)? STREAM (IF NOT EXISTS)? sourceName\n  (tableElements)?\n  (WITH tableProperties)?\n</code></pre> <pre><code>ASSERT STREAM sourceName (tableElements)? (WITH tableProperties)?\n</code></pre>","title":"CreateStream"},{"location":"CreateStream/#creating-instance","text":"<p><code>CreateStream</code> takes the following to be created:</p> <ul> <li> <code>NodeLocation</code> <li> <code>SourceName</code> <li> <code>TableElements</code> <li> <code>orReplace</code> flag <li> <code>notExists</code> flag <li> CreateSourceProperties <li> <code>isSource</code> flag  <p><code>CreateStream</code> is created when:</p> <ul> <li><code>AstBuilder.Visitor</code> is requested to visitCreateStream and visitAssertStream</li> </ul>","title":"Creating Instance"},{"location":"DefaultKsqlParser/","text":"<p><code>DefaultKsqlParser</code> is a KsqlParser.</p>","title":"DefaultKsqlParser"},{"location":"DefaultKsqlParser/#creating-instance","text":"<p><code>DefaultKsqlParser</code> takes no arguments to be created.</p> <p><code>DefaultKsqlParser</code> is created when:</p> <ul> <li><code>Cli</code> is created</li> <li><code>EngineContext</code> utility is used to create an EngineContext and createSandbox</li> <li><code>KsqlResource</code> is requested for TERMINATE_CLUSTER</li> </ul>","title":"Creating Instance"},{"location":"DefaultKsqlParser/#parsing-sql-text","text":"","title":"Parsing SQL Text <pre><code>List&lt;ParsedStatement&gt; parse(\n  String sql)\n</code></pre> <p><code>parse</code>...FIXME</p> <p><code>parse</code> is part of the KsqlParser abstraction.</p>"},{"location":"DefaultKsqlParser/#preparing-parsedstatement","text":"","title":"Preparing ParsedStatement <pre><code>PreparedStatement&lt;?&gt; prepare(\n  ParsedStatement stmt,\n  TypeRegistry typeRegistry)\n</code></pre> <p><code>prepare</code>...FIXME</p> <p><code>prepare</code> is part of the KsqlParser abstraction.</p>"},{"location":"EngineContext/","text":"","title":"EngineContext"},{"location":"EngineContext/#parse","text":"","title":"parse <pre><code>List&lt;ParsedStatement&gt; parse(\n  String sql)\n</code></pre> <p><code>parse</code> requests the KsqlParser to parse the SQL text.</p> <p><code>parse</code> is used when:</p> <ul> <li><code>EngineContext</code> is requested to substituteVariables</li> <li><code>KsqlEngine</code> is requested to parse a SQL text</li> <li><code>SandboxedExecutionContext</code> is requested to <code>parse</code></li> </ul>"},{"location":"EngineContext/#prepare","text":"","title":"prepare <pre><code>PreparedStatement&lt;?&gt; prepare(\n  ParsedStatement stmt,\n  Map&lt;String, String&gt; variablesMap)\n</code></pre> <p><code>prepare</code> requests the KsqlParser to prepare the ParsedStatement and creates a new <code>PreparedStatement</code>.</p> <p><code>prepare</code> is used when:</p> <ul> <li><code>KsqlEngine</code> is requested to prepare a ParsedStatement</li> <li><code>SandboxedExecutionContext</code> is requested to <code>prepare</code> a <code>ParsedStatement</code></li> </ul>"},{"location":"EngineContext/#creating-enginecontext","text":"","title":"Creating EngineContext <pre><code>EngineContext create(\n  ServiceContext serviceContext,\n  ProcessingLogContext processingLogContext,\n  MutableMetaStore metaStore,\n  QueryIdGenerator queryIdGenerator,\n  QueryCleanupService cleanupService,\n  KsqlConfig ksqlConfig,\n  Collection&lt;QueryEventListener&gt; registrationListeners)\n</code></pre> <p><code>create</code>...FIXME</p> <p><code>create</code> is used when:</p> <ul> <li><code>KsqlEngine</code> is created</li> </ul>"},{"location":"EngineExecutor/","text":"","title":"EngineExecutor"},{"location":"EngineExecutor/#executetransientquery","text":"","title":"executeTransientQuery <pre><code>TransientQueryMetadata executeTransientQuery(\n  ConfiguredStatement&lt;Query&gt; statement,\n  boolean excludeTombstones)\n</code></pre> <p><code>executeTransientQuery</code>...FIXME</p> <p>In the end, <code>executeTransientQuery</code> requests the EngineContext for the QueryRegistry that is in turn requested to createTransientQuery.</p> <p><code>executeTransientQuery</code> is used when:</p> <ul> <li><code>KsqlEngine</code> is requested to executeTransientQuery</li> <li><code>SandboxedExecutionContext</code> is requested to executeTransientQuery</li> </ul>"},{"location":"KafkaStreamsBuilder/","text":"<p><code>KafkaStreamsBuilder</code> is...FIXME</p>","title":"KafkaStreamsBuilder"},{"location":"KsqlConfig/","text":"","title":"KsqlConfig"},{"location":"KsqlConfig/#ksqlvariablesubstitutionenable","text":"","title":"ksql.variable.substitution.enable <p>Enables variable substitution on SQL statements</p> <p>Default: <code>true</code></p> <p>Used when:</p> <ul> <li><code>Cli</code> is requested to <code>isVariableSubstitutionEnabled</code></li> <li><code>RequestHandler</code> is requested to <code>isVariableSubstitutionEnabled</code></li> <li><code>RequestValidator</code> is requested to <code>isVariableSubstitutionEnabled</code></li> </ul>"},{"location":"KsqlEngine/","text":"","title":"KsqlEngine"},{"location":"KsqlEngine/#creating-instance","text":"<p><code>KsqlEngine</code> takes the following to be created:</p> <ul> <li> ServiceContext <li> ProcessingLogContext <li> Service ID <li> MutableMetaStore <li> <code>Function&lt;KsqlEngine, KsqlEngineMetrics&gt;</code> <li> QueryIdGenerator <li> KsqlConfig <li> <code>QueryEventListener</code>s  <p><code>KsqlEngine</code> is created when:</p> <ul> <li><code>KsqlContext</code> is requested to create</li> <li><code>KsqlRestApplication</code> is requested to buildApplication</li> <li><code>StandaloneExecutorFactory</code> is requested to create</li> </ul>","title":"Creating Instance"},{"location":"KsqlEngine/#enginecontext","text":"","title":"EngineContext <p><code>KsqlEngine</code> creates an EngineContext when created.</p> <p>The <code>EngineContext</code> is used when:</p> <ul> <li>getAllLiveQueries</li> <li>many others</li> </ul>"},{"location":"KsqlEngine/#getalllivequeries","text":"","title":"getAllLiveQueries <pre><code>List&lt;QueryMetadata&gt; getAllLiveQueries()\n</code></pre> <p><code>getAllLiveQueries</code>...FIXME</p> <p><code>getAllLiveQueries</code> is part of the KsqlExecutionContext abstraction.</p>"},{"location":"KsqlEngine/#parsing-sql-text","text":"","title":"Parsing SQL Text <pre><code>List&lt;ParsedStatement&gt; parse(\n  String sql)\n</code></pre> <p><code>parse</code>...FIXME</p> <p><code>parse</code> is part of the KsqlExecutionContext abstraction.</p>"},{"location":"KsqlEngine/#preparing-parsedstatement","text":"","title":"Preparing ParsedStatement <pre><code>PreparedStatement&lt;?&gt; prepare(\n  ParsedStatement stmt,\n  Map&lt;String, String&gt; variablesMap)\n</code></pre> <p><code>prepare</code> requests the EngineContext to prepare the given ParsedStatement.</p> <p><code>prepare</code> is part of the KsqlExecutionContext abstraction.</p>"},{"location":"KsqlExecutionContext/","text":"<p><code>KsqlExecutionContext</code> is an abstraction of execution contexts.</p>","title":"KsqlExecutionContext"},{"location":"KsqlExecutionContext/#contract-subset","text":"","title":"Contract (Subset)"},{"location":"KsqlExecutionContext/#getalllivequeries","text":"","title":"getAllLiveQueries <pre><code>List&lt;QueryMetadata&gt; getAllLiveQueries()\n</code></pre> <p>Used when:</p> <ul> <li><code>ListQueriesExecutor</code> is requested to <code>getLocalSimple</code>, <code>getLocalExtended</code></li> <li><code>QueryCapacityUtil</code> utility is used to <code>getNumLivePushQueries</code></li> </ul>"},{"location":"KsqlExecutionContext/#parsing-sql-text","text":"","title":"Parsing SQL Text <pre><code>List&lt;ParsedStatement&gt; parse(\n  String sql)\n</code></pre> <p>Used when:</p> <ul> <li><code>KsqlContext</code> is requested to sql</li> <li><code>SqlFormatInjector</code> is requested to <code>inject</code></li> <li><code>QueryEndpoint</code> is requested to <code>createStatement</code></li> <li><code>KsqlRestApplication</code> is requested to registerCommandTopic</li> <li><code>StandaloneExecutor</code> is requested to processesQueryFile</li> <li><code>StatementParser</code> is requested to <code>parseSingleStatement</code></li> <li><code>KsqlResource</code> is requested to handleKsqlStatements</li> </ul>"},{"location":"KsqlExecutionContext/#preparing-parsedstatement","text":"","title":"Preparing ParsedStatement <pre><code>PreparedStatement&lt;?&gt; prepare(\n  ParsedStatement stmt,\n  Map&lt;String, String&gt; variablesMap)\nPreparedStatement&lt;?&gt; prepare(\n  ParsedStatement stmt) // (1)\n</code></pre> <ol> <li>Uses an empty <code>Map</code></li> </ol> <p>Used when:</p> <ul> <li><code>KsqlContext</code> is requested to execute</li> <li><code>KsqlRestApplication</code> is requested to registerCommandTopic</li> <li><code>QueryEndpoint</code> is requested to <code>createStatement</code></li> <li><code>RequestHandler</code> is requested to execute</li> <li><code>RequestValidator</code> is requested to <code>validate</code></li> <li><code>SqlFormatInjector</code> is requested to <code>inject</code></li> <li><code>StandaloneExecutor.StatementExecutor</code> is requested to <code>prepare</code> a <code>ParsedStatement</code></li> <li><code>StatementParser</code> is requested to <code>parseSingleStatement</code></li> </ul>"},{"location":"KsqlExecutionContext/#implementations","text":"<ul> <li>KsqlEngine</li> <li>SandboxedExecutionContext</li> </ul>","title":"Implementations"},{"location":"KsqlParser/","text":"<p><code>KsqlParser</code> is an abstraction of SQL parsers.</p>","title":"KsqlParser"},{"location":"KsqlParser/#contract","text":"","title":"Contract"},{"location":"KsqlParser/#parsing-sql-text","text":"","title":"Parsing SQL Text <pre><code>List&lt;ParsedStatement&gt; parse(\n  String sql)\n</code></pre> <p>Used when:</p> <ul> <li><code>Cli</code> is requested to substituteVariables and handleStatements</li> <li><code>EngineContext</code> is requested to parse a SQL statement</li> <li><code>KsqlResource</code> is requested for TERMINATE_CLUSTER</li> </ul>"},{"location":"KsqlParser/#preparing-parsedstatement","text":"","title":"Preparing ParsedStatement <pre><code>PreparedStatement&lt;?&gt; prepare(\n  ParsedStatement statement,\n  TypeRegistry typeRegistry)\n</code></pre> <p>Used when:</p> <ul> <li><code>EngineContext</code> is requested to prepare a ParsedStatement</li> </ul>"},{"location":"KsqlParser/#implementations","text":"<ul> <li>DefaultKsqlParser</li> </ul>","title":"Implementations"},{"location":"QueryApplicationId/","text":"","title":"QueryApplicationId"},{"location":"QueryApplicationId/#build","text":"","title":"build <pre><code>String build(\n  KsqlConfig config,\n  boolean persistent,\n  QueryId queryId)\n</code></pre> <p><code>build</code>...FIXME</p> <p><code>build</code> is used when:</p> <ul> <li><code>QueryBuilder</code> is requested to <code>buildTransientQuery</code> and <code>buildPersistentQueryInDedicatedRuntime</code></li> <li><code>ListSourceExecutor</code> is requested to <code>queryOffsetSummaries</code></li> <li><code>KsqlRestoreCommandTopic</code> is requested to <code>maybeCleanUpQuery</code></li> </ul>"},{"location":"QueryBuilder/","text":"","title":"QueryBuilder"},{"location":"QueryBuilder/#buildtransientquery","text":"","title":"buildTransientQuery <pre><code>TransientQueryMetadata buildTransientQuery(\n  String statementText,\n  QueryId queryId,\n  Set&lt;SourceName&gt; sources,\n  ExecutionStep&lt;?&gt; physicalPlan,\n  String planSummary,\n  LogicalSchema schema,\n  OptionalInt limit,\n  Optional&lt;WindowInfo&gt; windowInfo,\n  boolean excludeTombstones,\n  QueryMetadata.Listener listener,\n  StreamsBuilder streamsBuilder,\n  Optional&lt;ImmutableMap&lt;TopicPartition, Long&gt;&gt; endOffsets)\n</code></pre> <p><code>buildTransientQuery</code>...FIXME</p> <p><code>buildTransientQuery</code> is used when:</p> <ul> <li><code>QueryRegistryImpl</code> is requested to createTransientQuery and createStreamPullQuery</li> </ul>"},{"location":"QueryLogger/","text":"<p><code>QueryLogger</code> is...FIXME</p>","title":"QueryLogger"},{"location":"QueryMetadata/","text":"<p><code>QueryMetadata</code> is...FIXME</p>","title":"QueryMetadata"},{"location":"QueryMetadataImpl/","text":"<p><code>QueryMetadataImpl</code> is a QueryMetadata.</p>","title":"QueryMetadataImpl"},{"location":"QueryMetadataImpl/#creating-instance","text":"<p><code>QueryMetadataImpl</code> takes the following to be created:</p> <ul> <li> Statement Text <li> <code>LogicalSchema</code> <li> <code>SourceName</code>s <li> Execution Plan <li> queryApplicationId <li> <code>Topology</code> <li>KafkaStreamsBuilder</li> <li> Streams Properties <li> overriddenProperties <li> <code>closeTimeout</code> <li> <code>QueryId</code> <li> <code>QueryErrorClassifier</code> <li> <code>maxQueryErrorsQueueSize</code> <li> <code>baseWaitingTimeMs</code> <li> <code>retryBackoffMaxMs</code> <li> <code>Listener</code>","title":"Creating Instance"},{"location":"QueryMetadataImpl/#kafkastreamsbuilder","text":"","title":"KafkaStreamsBuilder <p><code>QueryMetadataImpl</code> is given a KafkaStreamsBuilder when created.</p>"},{"location":"QueryMetadataImpl/#initialize","text":"","title":"initialize <pre><code>void initialize()\n</code></pre> <p><code>initialize</code> requests the KafkaStreamsBuilder to build a KafkaStreams instance (with the Topology and the streamsProperties).</p> <p><code>initialize</code> resets the KafkaStreams instance and turns the initialized flag on.</p> <p><code>initialize</code> is part of the QueryMetadata abstraction.</p>"},{"location":"QueryRegistry/","text":"<p><code>QueryRegistry</code> is an abstraction of query registries for building and managing queries.</p>","title":"QueryRegistry"},{"location":"QueryRegistry/#contract-subset","text":"","title":"Contract (Subset)"},{"location":"QueryRegistry/#createtransientquery","text":"","title":"createTransientQuery <pre><code>TransientQueryMetadata createTransientQuery(\n  SessionConfig config,\n  ServiceContext serviceContext,\n  ProcessingLogContext processingLogContext,\n  MetaStore metaStore,\n  String statementText,\n  QueryId queryId,\n  Set&lt;SourceName&gt; sources,\n  ExecutionStep&lt;?&gt; physicalPlan,\n  String planSummary,\n  LogicalSchema schema,\n  OptionalInt limit,\n  Optional&lt;WindowInfo&gt; windowInfo,\n  boolean excludeTombstones)\n</code></pre> <p>QueryRegistryImpl.createTransientQuery</p> <p>Used when:</p> <ul> <li><code>EngineExecutor</code> is requested to executeTransientQuery</li> </ul>"},{"location":"QueryRegistry/#implementations","text":"<ul> <li>QueryRegistryImpl</li> </ul>","title":"Implementations"},{"location":"QueryRegistryImpl/","text":"","title":"QueryRegistryImpl"},{"location":"QueryRegistryImpl/#createtransientquery","text":"","title":"createTransientQuery <pre><code>TransientQueryMetadata createTransientQuery(\n  SessionConfig config,\n  ServiceContext serviceContext,\n  ProcessingLogContext processingLogContext,\n  MetaStore metaStore,\n  String statementText,\n  QueryId queryId,\n  Set&lt;SourceName&gt; sources,\n  ExecutionStep&lt;?&gt; physicalPlan,\n  String planSummary,\n  LogicalSchema schema,\n  OptionalInt limit,\n  Optional&lt;WindowInfo&gt; windowInfo,\n  boolean excludeTombstones)\n</code></pre> <p><code>createTransientQuery</code>...FIXME</p> <p><code>createTransientQuery</code> is part of the QueryRegistry abstraction.</p>"},{"location":"SandboxedExecutionContext/","text":"<p><code>SandboxedExecutionContext</code> is...FIXME</p>","title":"SandboxedExecutionContext"},{"location":"SourceAccumulator/","text":"<p><code>SourceAccumulator</code> is a <code>SqlBaseBaseVisitor</code> to collect source relations (possibly aliased) in a SQL query.</p> <pre><code>aliasedRelation\n    : relationPrimary (AS? sourceName)?\n    ;\n\nrelationPrimary\n    : sourceName                                                  #tableName\n    ;\n</code></pre>  <p>Note</p> <p><code>SqlBaseBaseVisitor</code> is generated from <code>io/confluent/ksql/parser/SqlBase.g4</code> at build time by ANTLR.</p>","title":"SourceAccumulator"},{"location":"SourceAccumulator/#visitcreatestream","text":"","title":"visitCreateStream <p>Creates a CreateStream</p>"},{"location":"SqlPrimitiveType/","text":"<p><code>SqlPrimitiveType</code> is...FIXME</p>","title":"SqlPrimitiveType"},{"location":"SqlTypeParser/","text":"","title":"SqlTypeParser"},{"location":"SqlTypeParser/#demo","text":"<pre><code>import io.confluent.ksql.schema.ksql.SqlTypeParser\nval typeParser = SqlTypeParser.create(TypeRegistry.EMPTY)\n</code></pre>","title":"Demo"},{"location":"SqlTypeParser/#creating-instance","text":"<p><code>SqlTypeParser</code> takes the following to be created:</p> <ul> <li> TypeRegistry  <p><code>SqlTypeParser</code> is created using create factory.</p>","title":"Creating Instance"},{"location":"SqlTypeParser/#creating-sqltypeparser","text":"","title":"Creating SqlTypeParser <pre><code>SqlTypeParser create(\n  TypeRegistry typeRegistry)\n</code></pre> <p><code>create</code> creates a SqlTypeParser with the given <code>TypeRegistry</code>.</p> <p><code>create</code> is used when:</p> <ul> <li><code>UserFunctionLoader</code> is created</li> <li><code>AstBuilder.Visitor</code> is created</li> <li><code>SchemaParser</code> is requested to <code>parse</code> a schema</li> <li><code>SqlTypeDeserializer</code> is requested to <code>deserialize</code></li> <li><code>KsqlTargetUtil</code> is requested to <code>createSchema</code></li> </ul>"},{"location":"TransientQueryMetadata/","text":"<p><code>TransientQueryMetadata</code> is...FIXME</p>","title":"TransientQueryMetadata"},{"location":"overview/","text":"<p>ksqlDB is \"the database purpose-built for stream processing applications.\"</p> <p>ksqlDB uses KsqlServerMain to handle SQL queries (from the command line or sent through a REST endpoint).</p> <pre><code>$ ./bin/ksql-server-start config/ksql-server.properties\n\n                  ===========================================\n                  =       _              _ ____  ____       =\n                  =      | | _____  __ _| |  _ \\| __ )      =\n                  =      | |/ / __|/ _` | | | | |  _ \\      =\n                  =      |   &lt;\\__ \\ (_| | | |_| | |_) |     =\n                  =      |_|\\_\\___/\\__, |_|____/|____/      =\n                  =                   |_|                   =\n                  =        The Database purpose-built       =\n                  =        for stream processing apps       =\n                  ===========================================\n\nCopyright 2017-2021 Confluent Inc.\n\nServer 7.2.0-0 listening on http://0.0.0.0:8088\n\nTo access the KSQL CLI, run:\nksql http://0.0.0.0:8088\n</code></pre> <p>ksqlDB uses Ksql as the command-line interactive environment.</p> <pre><code>$ ./bin/ksql\nksql&gt;\n</code></pre>","title":"ksqlDB"},{"location":"cli/Cli/","text":"","title":"Cli"},{"location":"cli/Cli/#runcommand","text":"","title":"runCommand <pre><code>void runCommand(\n  String command)\n</code></pre> <p><code>runCommand</code> handleLine.</p> <p><code>runCommand</code> is used when:</p> <ul> <li><code>Ksql</code> is requested to run</li> </ul>"},{"location":"cli/Cli/#runinteractively","text":"","title":"runInteractively <pre><code>void runInteractively()\n</code></pre> <p><code>runInteractively</code>...FIXME</p> <p><code>runInteractively</code> is used when:</p> <ul> <li><code>Ksql</code> is requested to run</li> </ul>"},{"location":"cli/Cli/#handleline","text":"","title":"handleLine <pre><code>void handleLine(\n  String line)\n</code></pre> <p><code>handleLine</code> removes any leading and trailing spaces from the given <code>line</code> and handleStatements.</p> <p><code>handleLine</code> simply returns back when the given <code>line</code> is empty after trimming.</p> <p><code>handleLine</code> is used when:</p> <ul> <li><code>Cli</code> is requested to runScript, runCommand, runInteractively</li> </ul>"},{"location":"cli/Cli/#handlestatements","text":"","title":"handleStatements <pre><code>void handleStatements(\n  String line)\n</code></pre> <p><code>handleStatements</code> requests the DefaultKsqlParser to parse the given line (into <code>ParsedStatement</code>s).</p>  <p>Note</p> <p>There could be one or more <code>ParsedStatement</code>s in the given <code>line</code>.</p>  <p>For every <code>ParsedStatement</code>, <code>handleStatements</code> substituteVariables and...FIXME</p> <p><code>handleStatements</code>...FIXME</p>"},{"location":"cli/Cli/#substitutevariables","text":"","title":"substituteVariables <pre><code>ParsedStatement substituteVariables(\n  ParsedStatement statement)\n</code></pre> <p><code>substituteVariables</code>...FIXME</p>"},{"location":"cli/Cli/#isvariablesubstitutionenabled","text":"","title":"isVariableSubstitutionEnabled <pre><code>boolean isVariableSubstitutionEnabled()\n</code></pre> <p><code>isVariableSubstitutionEnabled</code>...FIXME</p>"},{"location":"cli/Ksql/","text":"<p><code>Ksql</code> is a standalone (command-line) application.</p>","title":"Ksql"},{"location":"cli/Ksql/#ksql-shell-script","text":"","title":"ksql Shell Script <p><code>Ksql</code> can be launched using <code>ksql</code> shell script (or <code>ksql-run-class</code> directly).</p> <pre><code>./bin/ksql-run-class io.confluent.ksql.Ksql\n</code></pre>"},{"location":"cli/Ksql/#launching-command-line-application","text":"","title":"Launching Command-Line Application <p><code>main</code>...FIXME</p>"},{"location":"cli/Ksql/#run","text":"","title":"run <pre><code>void run()\n</code></pre> <p><code>run</code>...FIXME</p>"},{"location":"embedded/EmbeddedKsql/","text":"<p><code>EmbeddedKsql</code> is a standalone (command-line) application.</p>","title":"EmbeddedKsql"},{"location":"embedded/KsqlContext/","text":"","title":"KsqlContext"},{"location":"embedded/KsqlContext/#creating-instance","text":"<p><code>KsqlContext</code> takes the following to be created:</p> <ul> <li> ServiceContext <li> KsqlConfig <li> KsqlEngine <li> <code>BiFunction&lt;KsqlExecutionContext, ServiceContext, Injector&gt;</code>  <p><code>KsqlContext</code> is created when:</p> <ul> <li><code>KsqlContext</code> utility is used to create a KsqlContext</li> </ul>","title":"Creating Instance"},{"location":"embedded/KsqlContext/#creating-ksqlcontext","text":"","title":"Creating KsqlContext <pre><code>KsqlContext create(\n  KsqlConfig ksqlConfig,\n  ProcessingLogContext processingLogContext)\n</code></pre> <p><code>create</code>...FIXME</p> <p><code>create</code> is used when:</p> <ul> <li>EmbeddedKsql standalone application is launched</li> </ul>"},{"location":"rest/CommandQueue/","text":"<p><code>CommandQueue</code> is an abstraction of command queues.</p>","title":"CommandQueue"},{"location":"rest/CommandQueue/#contract-subset","text":"","title":"Contract (Subset)"},{"location":"rest/CommandQueue/#enqueuecommand","text":"","title":"enqueueCommand <pre><code>QueuedCommandStatus enqueueCommand(\n  CommandId commandId,\n  Command command,\n  Producer&lt;CommandId, Command&gt; transactionalProducer)\n</code></pre> <p>Used when:</p> <ul> <li><code>DistributingExecutor</code> is requested to execute a SQL statement</li> </ul>"},{"location":"rest/CommandQueue/#implementations","text":"<ul> <li>CommandStore</li> </ul>","title":"Implementations"},{"location":"rest/CommandStore/","text":"<p><code>CommandStore</code> is...FIXME</p>","title":"CommandStore"},{"location":"rest/CustomExecutors/","text":"<p><code>CustomExecutors</code> is a collection of StatementExecutors that do not need to be distributed.</p> <p>    Enum Name Class StatementExecutor     <code>DESCRIBE_STREAMS</code> <code>DescribeStreams</code> <code>ListSourceExecutor::describeStreams</code>   <code>DESCRIBE_TABLES</code> <code>DescribeTables</code> <code>ListSourceExecutor::describeTables</code>   <code>LIST_CONNECTORS</code> <code>ListConnectors</code> <code>ListConnectorsExecutor::execute</code>   <code>LIST_CONNECTOR_PLUGINS</code> <code>ListConnectorPlugins</code> <code>ListConnectorPluginsExecutor::execute</code>   <code>LIST_FUNCTIONS</code> <code>ListFunctions</code> <code>ListFunctionsExecutor::execute</code>   <code>LIST_PROPERTIES</code> <code>ListProperties</code> <code>ListPropertiesExecutor::execute</code>   <code>LIST_QUERIES</code> <code>ListQueries</code> <code>ListQueriesExecutor::execute</code>   <code>LIST_STREAMS</code> <code>ListStreams</code> <code>ListSourceExecutor::streams</code>   <code>LIST_TABLES</code> <code>ListTables</code> <code>ListSourceExecutor::tables</code>   <code>LIST_TOPICS</code> <code>ListTopics</code> <code>ListTopicsExecutor::execute</code>   <code>LIST_TYPES</code> <code>ListTypes</code> <code>ListTypesExecutor::execute</code>   <code>LIST_VARIABLES</code> <code>ListVariables</code> <code>ListVariablesExecutor::execute</code>   others","title":"CustomExecutors"},{"location":"rest/CustomExecutors/#executor_map","text":"","title":"EXECUTOR_MAP <p><code>CustomExecutors</code> defines a lookup table of StatementExecutors by their class types.</p>"},{"location":"rest/DistributingExecutor/","text":"","title":"DistributingExecutor"},{"location":"rest/DistributingExecutor/#creating-instance","text":"<p><code>DistributingExecutor</code> takes the following to be created:</p> <ul> <li> KsqlConfig <li> CommandQueue <li> DistributedCmdResponse Timeout <li> <code>BiFunction&lt;KsqlExecutionContext, ServiceContext, Injector&gt;</code> <li> <code>KsqlAuthorizationValidator</code> <li> <code>ValidatedCommandFactory</code> <li> Error Handler <li> CommandRunner Warning  <p><code>DistributingExecutor</code> is created when:</p> <ul> <li><code>KsqlResource</code> is requested to configure (and creates a RequestHandler)</li> </ul>","title":"Creating Instance"},{"location":"rest/Executable/","text":"<p><code>Executable</code> is an abstraction of executables.</p>","title":"Executable"},{"location":"rest/Executable/#contract","text":"","title":"Contract"},{"location":"rest/Executable/#awaitterminated","text":"","title":"awaitTerminated <pre><code>void awaitTerminated()\n</code></pre> <p>Used when:</p> <ul> <li><code>KsqlServerMain</code> is requested to tryStartApp</li> <li><code>MultiExecutable</code> is requested to <code>awaitTerminated</code></li> </ul>"},{"location":"rest/Executable/#notifyterminated","text":"","title":"notifyTerminated <pre><code>void notifyTerminated()\n</code></pre> <p>Used when:</p> <ul> <li><code>KsqlServerMain</code> is requested to tryStartApp</li> <li><code>MultiExecutable</code> is requested to <code>notifyTerminated</code></li> </ul>"},{"location":"rest/Executable/#shutdown","text":"","title":"shutdown <pre><code>void shutdown()\n</code></pre> <p>Used when:</p> <ul> <li><code>KsqlServerMain</code> is requested to tryStartApp</li> <li><code>MultiExecutable</code> is requested to <code>shutdown</code></li> </ul>"},{"location":"rest/Executable/#startasync","text":"","title":"startAsync <pre><code>void startAsync()\n</code></pre> <p>Used when:</p> <ul> <li><code>KsqlServerMain</code> is requested to tryStartApp</li> <li><code>MultiExecutable</code> is requested to <code>startAsync</code></li> </ul>"},{"location":"rest/Executable/#implementations","text":"<ul> <li>StandaloneExecutor</li> <li><code>MultiExecutable</code></li> <li><code>ConnectExecutable</code></li> <li>KsqlRestApplication</li> </ul>","title":"Implementations"},{"location":"rest/KsqlResource/","text":"","title":"KsqlResource"},{"location":"rest/KsqlResource/#requesthandler","text":"","title":"RequestHandler <p><code>KsqlResource</code> creates a <code>RequestHandler</code> when requested to configure.</p> <p><code>RequestHandler</code> is used when:</p> <ul> <li>terminateCluster</li> <li>handleKsqlStatements</li> </ul>"},{"location":"rest/KsqlResource/#handleksqlstatements","text":"","title":"handleKsqlStatements <pre><code>EndpointResponse handleKsqlStatements(\n  KsqlSecurityContext securityContext,\n  KsqlRequest request)\n</code></pre> <p><code>handleKsqlStatements</code> prints out the following INFO message to the logs:</p> <pre><code>Received: [request]\n</code></pre> <p><code>handleKsqlStatements</code>...FIXME</p> <p><code>handleKsqlStatements</code> requests the KsqlEngine to parse the SQL text.</p> <p><code>handleKsqlStatements</code>...FIXME</p> <p><code>handleKsqlStatements</code> requests the RequestHandler to execute the SQL statements.</p> <p><code>handleKsqlStatements</code>...FIXME</p> <p><code>handleKsqlStatements</code> is used when:</p> <ul> <li><code>KsqlServerEndpoints</code> is requested to <code>executeKsqlRequest</code></li> <li><code>ServerInternalKsqlClient</code> is requested to <code>makeKsqlRequest</code></li> </ul>"},{"location":"rest/KsqlRestApplication/","text":"<p><code>KsqlRestApplication</code> is a ksqlDB API server.</p>","title":"KsqlRestApplication"},{"location":"rest/KsqlRestApplication/#creating-instance","text":"<p><code>KsqlRestApplication</code> takes the following to be created:</p> <ul> <li> ServiceContext <li> KsqlEngine <li> KsqlConfig <li> KsqlRestConfig <li> CommandRunner <li> CommandStore <li> StatusResource <li> StreamedQueryResource <li> KsqlResource <li> VersionCheckerAgent <li> KsqlSecurityContextProvider <li> KsqlSecurityExtension <li> AuthenticationPlugin <li> ServerState <li> ProcessingLogContext <li> <code>KsqlServerPrecondition</code>s <li> <code>KsqlConfigurable</code>s <li> <code>Consumer&lt;KsqlConfig&gt;</code> <li> <code>HeartbeatAgent</code> <li> <code>LagReportingAgent</code> <li> Vertx <li> DenyListPropertyValidator <li> <code>PullQueryExecutorMetrics</code> <li> <code>ScalablePushQueryMetrics</code> <li> <code>LocalCommands</code> <li> QueryExecutor   <p>When created, <code>KsqlRestApplication</code> prints out the following DEBUG message to the logs:</p> <pre><code>Creating instance of ksqlDB API server\n</code></pre> <p>In the end, <code>KsqlRestApplication</code> prints out the following DEBUG message to the logs:</p> <pre><code>ksqlDB API server instance created\n</code></pre>  <p><code>KsqlRestApplication</code> is created when:</p> <ul> <li><code>KsqlRestApplication</code> utility is used to buildApplication</li> </ul>","title":"Creating Instance"},{"location":"rest/KsqlRestApplication/#buildapplication","text":"","title":"buildApplication <pre><code>KsqlRestApplication buildApplication(\n  KsqlRestConfig restConfig)\nKsqlRestApplication buildApplication(\n  String metricsPrefix,\n  KsqlRestConfig restConfig,\n  Function&lt;Supplier&lt;Boolean&gt;, VersionCheckerAgent&gt; versionCheckerFactory,\n  int maxStatementRetries,\n  ServiceContext serviceContext,\n  Supplier&lt;SchemaRegistryClient&gt; schemaRegistryClientFactory,\n  Vertx vertx,\n  KsqlClient sharedClient)\n</code></pre> <p><code>buildApplication</code>...FIXME</p> <p><code>buildApplication</code> is used when:</p> <ul> <li><code>KsqlServerMain</code> is requested to createExecutable</li> </ul>"},{"location":"rest/KsqlRestApplication/#startasync","text":"","title":"startAsync <pre><code>void startAsync()\n</code></pre> <p><code>startAsync</code> prints out the following DEBUG message to the logs:</p> <pre><code>Starting the ksqlDB API server\n</code></pre> <p><code>startAsync</code>...FIXME</p> <p>In the end, <code>startAsync</code> prints out the following INFO message to the logs followed by displayWelcomeMessage.</p> <pre><code>ksqlDB API server listening on [comma-separated listeners]\n</code></pre>  <p><code>startAsync</code> is part of the Executable abstraction.</p>"},{"location":"rest/KsqlRestApplication/#displaywelcomemessage","text":"","title":"displayWelcomeMessage <pre><code>void displayWelcomeMessage()\n</code></pre> <p><code>displayWelcomeMessage</code>...FIXME</p> <p>In the end, <code>displayWelcomeMessage</code> prints out the following to the standard output:</p> <pre><code>Server [version] listening on [comma-separated listeners]\n\nTo access the KSQL CLI, run:\nksql [listener]\n</code></pre>"},{"location":"rest/KsqlRestApplication/#startksql","text":"","title":"startKsql <pre><code>void startKsql(\n  KsqlConfig ksqlConfigWithPort)\n</code></pre> <p><code>startKsql</code>...FIXME</p>"},{"location":"rest/KsqlRestApplication/#initialize","text":"","title":"initialize <pre><code>void initialize(\n  KsqlConfig configWithApplicationServer)\n</code></pre> <p><code>initialize</code>...FIXME</p>"},{"location":"rest/KsqlRestApplication/#registercommandtopic","text":"","title":"registerCommandTopic <pre><code>void registerCommandTopic()\n</code></pre> <p><code>registerCommandTopic</code>...FIXME</p>"},{"location":"rest/KsqlServerMain/","text":"<p><code>KsqlServerMain</code> is a standalone (command-line) application with command-line options:</p> <pre><code>$ ./bin/ksql-server-start --help\nNAME\n        server - KSQL Cluster\n\nSYNOPSIS\n        server [ {-h | --help} ] [ --queries-file &lt;queriesFile&gt; ] [--]\n                &lt;config-file&gt;\n\nOPTIONS\n        -h, --help\n            Display help information\n\n        --queries-file &lt;queriesFile&gt;\n            Path to the query file on the local machine.\n\n        --\n            This option can be used to separate command-line options from the\n            list of arguments (useful when arguments might be mistaken for\n            command-line options)\n\n        &lt;config-file&gt;\n            A file specifying configs for the KSQL Server, KSQL, and its\n            underlying Kafka Streams instance(s). Refer to KSQL documentation\n            for a list of available configs.\n\n            This option may occur a maximum of 1 times\n</code></pre>","title":"KsqlServerMain"},{"location":"rest/KsqlServerMain/#ksql-server-start-shell-script","text":"","title":"ksql-server-start Shell Script <p><code>KsqlServerMain</code> can be launched using <code>ksql-server-start</code> shell script (or <code>ksql-run-class</code> directly).</p> <pre><code>./bin/ksql-run-class io.confluent.ksql.rest.server.KsqlServerMain\n</code></pre>"},{"location":"rest/KsqlServerMain/#creating-instance","text":"","title":"Creating Instance <p><code>KsqlServerMain</code> takes the following to be created:</p> <ul> <li> Executable <li> Shutdown Handler  <p><code>KsqlServerMain</code> is created when:</p> <ul> <li><code>KsqlServerMain</code> standalone application is launched</li> </ul>"},{"location":"rest/KsqlServerMain/#launching-ksqlservermain","text":"","title":"Launching KsqlServerMain <p><code>main</code> parses the command-line options and loads the required properties file.</p> <p><code>main</code> takes <code>ksql.server.install.dir</code> configuration property from the properties file.</p> <p><code>main</code> creates and validates a KsqlConfig.</p> <p><code>main</code> configures QueryLogger.</p> <p><code>main</code> takes the queries file (if used) and creates an Executable.</p> <p><code>main</code> creates a new KsqlServerMain (with the <code>Executable</code>) and starts it up.</p>  <p>Note</p> <p><code>main</code> is paused when starting up the executable (using awaitTerminated) until notifyTerminated which happens as part of a Java Virtual Machine shutdown hook.</p>"},{"location":"rest/KsqlServerMain/#creating-executable","text":"","title":"Creating Executable <pre><code>Executable createExecutable(\n  Map&lt;String, String&gt; properties,\n  Optional&lt;String&gt; queriesFile,\n  String installDir,\n  KsqlConfig ksqlConfig)\n</code></pre> <p>With queries file specified, <code>createExecutable</code> creates and returns a StandaloneExecutor.</p> <p>Otherwise, <code>createExecutable</code>...FIXME</p>"},{"location":"rest/KsqlServerMain/#trystartapp","text":"","title":"tryStartApp <pre><code>void tryStartApp()\n</code></pre> <p><code>tryStartApp</code> prints out the following INFO message to the logs:</p> <pre><code>Starting server\n</code></pre> <p><code>tryStartApp</code> requests the Executable to startAsync.</p> <p><code>tryStartApp</code> prints out the following INFO message to the logs:</p> <pre><code>Server up and running\n</code></pre> <p><code>tryStartApp</code> requests the Executable to awaitTerminated.</p> <p>Finally (when the Executable was requested to terminate), <code>tryStartApp</code> prints out the following INFO message to the logs:</p> <pre><code>Server shutting down\n</code></pre> <p><code>tryStartApp</code> requests the Executable to shutdown.</p>"},{"location":"rest/QueryExecutor/","text":"","title":"QueryExecutor"},{"location":"rest/QueryExecutor/#creating-instance","text":"<p><code>QueryExecutor</code> takes the following to be created:</p> <ul> <li> KsqlEngine <li> <code>KsqlRestConfig</code> <li> KsqlConfig <li> <code>PullQueryExecutorMetrics</code> <li> <code>ScalablePushQueryMetrics</code> <li> <code>RateLimiter</code> <li> <code>ConcurrencyLimiter</code> <li> <code>SlidingWindowRateLimiter</code> <li> <code>SlidingWindowRateLimiter</code> <li> <code>HARouting</code> <li> <code>PushRouting</code> <li> <code>LocalCommands</code>  <p><code>QueryExecutor</code> is created when:</p> <ul> <li><code>KsqlRestApplication</code> is requested to buildApplication</li> </ul>","title":"Creating Instance"},{"location":"rest/QueryExecutor/#handlestatement","text":"","title":"handleStatement <pre><code>QueryMetadataHolder handleStatement(\n  ServiceContext serviceContext,\n  Map&lt;String, Object&gt; configOverrides,\n  Map&lt;String, Object&gt; requestProperties,\n  PreparedStatement&lt;?&gt; statement,\n  Optional&lt;Boolean&gt; isInternalRequest,\n  MetricsCallbackHolder metricsCallbackHolder,\n  Context context,\n  boolean excludeTombstones)\n</code></pre> <p><code>handleStatement</code>...FIXME</p> <p><code>handleStatement</code> is used when:</p> <ul> <li><code>QueryEndpoint</code> is requested to createQueryPublisher</li> <li><code>StreamedQueryResource</code> is requested to <code>handleStatement</code></li> <li><code>WSQueryEndpoint</code> is requested to <code>handleStatement</code></li> </ul>"},{"location":"rest/QueryExecutor/#handlequery","text":"","title":"handleQuery <pre><code>QueryMetadataHolder handleQuery(\n  ServiceContext serviceContext,\n  PreparedStatement&lt;Query&gt; statement,\n  Optional&lt;Boolean&gt; isInternalRequest,\n  MetricsCallbackHolder metricsCallbackHolder,\n  Map&lt;String, Object&gt; configOverrides,\n  Map&lt;String, Object&gt; requestProperties,\n  Context context,\n  boolean excludeTombstones)\n</code></pre> <p><code>handleQuery</code>...FIXME</p>"},{"location":"rest/QueryExecutor/#handlepushquery","text":"","title":"handlePushQuery <pre><code>QueryMetadataHolder handlePushQuery(\n  ServiceContext serviceContext,\n  PreparedStatement&lt;Query&gt; statement,\n  Map&lt;String, Object&gt; streamsProperties,\n  boolean excludeTombstones)\n</code></pre> <p><code>handlePushQuery</code>...FIXME</p>"},{"location":"rest/RequestHandler/","text":"","title":"RequestHandler"},{"location":"rest/RequestHandler/#creating-instance","text":"<p><code>RequestHandler</code> takes the following to be created:</p> <ul> <li> CustomExecutors <li>DistributingExecutor</li> <li>KsqlEngine</li> <li> <code>CommandQueueSync</code>  <p><code>RequestHandler</code> is created when:</p> <ul> <li><code>KsqlResource</code> is requested to configure</li> </ul>","title":"Creating Instance"},{"location":"rest/RequestHandler/#ksqlengine","text":"","title":"KsqlEngine <p><code>RequestHandler</code> is given a KsqlEngine when created.</p> <p>The <code>KsqlEngine</code> is used for the following:</p> <ul> <li>Executing SQL Statements (and executeStatement)</li> <li>isVariableSubstitutionEnabled</li> </ul>"},{"location":"rest/RequestHandler/#distributingexecutor","text":"","title":"DistributingExecutor <p><code>RequestHandler</code> is given a DistributingExecutor when created.</p> <p>The <code>DistributingExecutor</code> is used for executing SQL statements.</p>"},{"location":"rest/RequestHandler/#executing-sql-statements","text":"","title":"Executing SQL Statements <pre><code>KsqlEntityList execute(\n  KsqlSecurityContext securityContext,\n  List&lt;ParsedStatement&gt; statements,\n  SessionProperties sessionProperties)\n</code></pre> <p><code>execute</code>...FIXME</p> <p><code>execute</code> executes the SQL statement.</p> <p><code>execute</code>...FIXME</p> <p><code>execute</code> is used when:</p> <ul> <li><code>KsqlResource</code> is requested to terminateCluster and handleKsqlStatements</li> </ul>"},{"location":"rest/RequestHandler/#executestatement","text":"","title":"executeStatement <pre><code>&lt;T extends Statement&gt; Optional&lt;KsqlEntity&gt; executeStatement(\n  KsqlSecurityContext securityContext,\n  PreparedStatement&lt;T&gt; prepared,\n  SessionProperties sessionProperties,\n  KsqlEntityList entities)\n</code></pre> <p><code>executeStatement</code>...FIXME</p>"},{"location":"rest/ServerOptions/","text":"<p><code>ServerOptions</code> is used to handle the command-line options of KsqlServerMain.</p> <p><code>ServerOptions</code> uses Airline annotation-driven Java library for building Command Line Interfaces (CLIs).</p>","title":"ServerOptions"},{"location":"rest/ServerOptions/#properties-file","text":"","title":"Properties File <p>(required) A file with the configuration properties for the KSQL Server, KSQL, and underlying Kafka Streams instances.</p>"},{"location":"rest/ServerOptions/#query-file","text":"","title":"Query File <p>A path to a query file on the local machine.</p> <p>A query file can be specified using the following (in the order of precedence):</p> <ol> <li><code>--queries-file</code> command-line option</li> <li><code>ksql.queries.file</code> Java property</li> </ol>"},{"location":"rest/StandaloneExecutor/","text":"<p><code>StandaloneExecutor</code> is...FIXME</p>","title":"StandaloneExecutor"},{"location":"rest/StandaloneExecutorFactory/","text":"","title":"StandaloneExecutorFactory"},{"location":"rest/StandaloneExecutorFactory/#creating-standaloneexecutor","text":"","title":"Creating StandaloneExecutor <pre><code>StandaloneExecutor create(\n  Map&lt;String, String&gt; properties,\n  String queriesFile,\n  String installDir)\n</code></pre> <p><code>create</code>...FIXME</p> <p><code>create</code> is used when:</p> <ul> <li><code>KsqlServerMain</code> is requested to createExecutable (with a queries file)</li> </ul>"},{"location":"rest/Statement/","text":"<p><code>Statement</code> is...FIXME</p>","title":"Statement"},{"location":"rest/StatementExecutor/","text":"<p><code>StatementExecutor</code> is an abstraction of executors of Statements.</p> <p><code>StatementExecutor</code> is a <code>FunctionalInterface</code> (Java).</p>","title":"StatementExecutor"},{"location":"rest/StatementExecutor/#contract","text":"","title":"Contract"},{"location":"rest/StatementExecutor/#executing-statement","text":"","title":"Executing Statement <pre><code>StatementExecutorResponse execute(\n  ConfiguredStatement&lt;T&gt; statement,\n  SessionProperties sessionProperties,\n  KsqlExecutionContext executionContext,\n  ServiceContext serviceContext)\n</code></pre> <p>Used when:</p> <ul> <li><code>CustomExecutors</code> is requested to execute</li> <li><code>RequestHandler</code> is requested to execute a SQL statement</li> </ul>"},{"location":"rest/StatementExecutor/#implementations","text":"<ul> <li>many</li> </ul>","title":"Implementations"}]}